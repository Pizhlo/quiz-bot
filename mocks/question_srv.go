// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "quiz-bot/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockminio is a mock of minio interface.
type Mockminio struct {
	ctrl     *gomock.Controller
	recorder *MockminioMockRecorder
}

// MockminioMockRecorder is the mock recorder for Mockminio.
type MockminioMockRecorder struct {
	mock *Mockminio
}

// NewMockminio creates a new mock instance.
func NewMockminio(ctrl *gomock.Controller) *Mockminio {
	mock := &Mockminio{ctrl: ctrl}
	mock.recorder = &MockminioMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockminio) EXPECT() *MockminioMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockminio) Get(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockminioMockRecorder) Get(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockminio)(nil).Get), ctx, filePath)
}

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// AllResults mocks base method.
func (m *Mockstorage) AllResults(ctx context.Context, userID int64) ([]model.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllResults", ctx, userID)
	ret0, _ := ret[0].([]model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllResults indicates an expected call of AllResults.
func (mr *MockstorageMockRecorder) AllResults(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllResults", reflect.TypeOf((*Mockstorage)(nil).AllResults), ctx, userID)
}

// SaveResults mocks base method.
func (m *Mockstorage) SaveResults(ctx context.Context, res model.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResults", ctx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResults indicates an expected call of SaveResults.
func (mr *MockstorageMockRecorder) SaveResults(ctx, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResults", reflect.TypeOf((*Mockstorage)(nil).SaveResults), ctx, res)
}
